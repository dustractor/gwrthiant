#include "plugin.hpp"


struct Graddfa : Module {
	enum ParamId {
		MODE_PARAM,
		PARAMS_LEN
	};
	enum InputId {
		CV_INPUT,
		INPUTS_LEN
	};
	enum OutputId {
		OUTPUTS_LEN
	};
	enum LightId {
		LIGHTS_LEN
	};

	Graddfa() {
		config(PARAMS_LEN, INPUTS_LEN, OUTPUTS_LEN, LIGHTS_LEN);
		configParam(MODE_PARAM, 0.f, 1.f, 0.f, "");
		configInput(CV_INPUT, "");
	}

	void process(const ProcessArgs& args) override {
        float cv = 0.f;
        if (inputs[CV_INPUT].isConnected()){
            cv = inputs[CV_INPUT].getVoltage();
        }
        float t = ((cv * 12) * (10.f / 46.f)) + ((2.f * (1.f / 12.f)) / 10.f);
        outputs[MODE_PARAM
	}
};


struct GraddfaWidget : ModuleWidget {
	GraddfaWidget(Graddfa* module) {
		setModule(module);
		setPanel(createPanel(asset::plugin(pluginInstance, "res/graddfa.svg")));

		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
		addChild(createWidget<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
		addChild(createWidget<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

		addParam(createParamCentered<RoundBlackKnob>(mm2px(Vec(7.62, 111.76)), module, Graddfa::MODE_PARAM));

		addInput(createInputCentered<PJ301MPort>(mm2px(Vec(7.62, 17.78)), module, Graddfa::CV_INPUT));
	}
};


Model* modelGraddfa = createModel<Graddfa, GraddfaWidget>("graddfa");
